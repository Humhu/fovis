#!/usr/bin/env python
# dynamic reconfigure specification for stereo odometer

PACKAGE = "fovis_ros"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("feature_window_size",  int_t, 0, "FAST feature window size (pixels)", 9, 3)
gen.add("max_pyramid_level",  int_t, 0, "Max pyramid depth", 3, 0)
gen.add("min_pyramid_level",  int_t, 0, "Min pyramid depth", 0, 0)
gen.add("target_pixels_per_feature",  int_t, 0, "Desired number of pixels per feature", 250, 10)
gen.add("fast_threshold",  int_t, 0, "Intensity threshold for FAST features", 20, 5, 70)
gen.add("use_adaptive_threshold",  bool_t, 0, "Whether to use adaptive thresholding", True)
gen.add("fast_threshold_adaptive_gain",  double_t, 0, "Adaptive gain for FAST thresholding", 0.005, 0, 1.0)
gen.add("use_homography_initialization",  bool_t, 0, "Whether to use homography to initialize search", True)
gen.add("ref_frame_change_threshold",  int_t, 0, "Min number of inliers before changing keyframe", 150, 10)

gen.add("use_bucketing",  bool_t, 0, "Whether to use bucket feature balancing", True)
gen.add("bucket_width",  int_t, 0, "Bucket grid size (pixels)", 80, 10)
gen.add("bucket_height",  int_t, 0, "Bucket grid size (pixels)", 80, 10)
gen.add("max_keypoints_per_bucket",  int_t, 0, "Max number of keypoints per bucket", 25, 1)
gen.add("use_image_normalization",  bool_t, 0, "Whether to normalize image intensities", False)

gen.add("inlier_max_reprojection_error",  double_t, 0, "Max reprojection error for an inlier", 1.5, 0)
gen.add("clique_inlier_threshold",  double_t, 0, "Max error for clique grouping", 0.1, 0)
gen.add("min_features_for_estimate",  int_t, 0, "Minimum number of features before estimating", 10, 10)
gen.add("max_mean_reprojection_error",  double_t, 0, "Max allowable average reprojection error for solution", 10.0, 0)
gen.add("use_subpixel_refinement",  bool_t, 0, "Whether to use subpixel refinement for correspondences", True)
gen.add("feature_search_window",  int_t, 0, "Window over which to search for correspondences (pixels)", 25, 3)
gen.add("update_target_features_with_refined",  bool_t, 0, "Whether to update features with refined correspondences", False)

gen.add("stereo_require_mutual_match",  bool_t, 0, "Whether to require mutual matches for stereo correspondences", True)
gen.add("stereo_max_dist_epipolar_line",  double_t, 0, "Max allowable deviation from epipolar line", 1.5, 0)
gen.add("stereo_max_refinement_displacement",  double_t, 0, "Max allowable displacement when performing refinement (pixels)", 1.0, 0)
gen.add("stereo_max_disparity",  int_t, 0, "Max allowable disparity value", 128, 1)

exit(gen.generate(PACKAGE, "stereo_odometer", "Stereo"))